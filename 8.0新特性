1、数据字典。 MySQL 现在合并了一个事务数据字典，用于存储有关数据库对象的信息。 在以前的 MySQL 版本中，字典数据存储在元数据文件和非事务表中。
	https://dev.mysql.com/doc/refman/8.0/en/data-dictionary.html
	
2、原子数据定义语句 (Atomic DDL)。 原子 DDL 语句将与 DDL 操作关联的数据字典更新、存储引擎操作和二进制日志写入组合到单个原子事务中
	https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html
	
3、升级程序。 以前，安装新版本的MySQL后，MySQL服务器在下次启动时会自动升级数据字典表，之后DBA需要手动调用mysql_upgrade来升级mysql schema中的系统表，
以及其中的对象。 其他模式，例如 sys 模式和用户模式。

4、会话重用。 MySQL 服务器现在默认支持 SSL 会话重用，并通过超时设置来控制服务器维护会话缓存的时间，该缓存建立了允许客户端为新连接请求会话重用的时间段。 
所有 MySQL 客户端程序都支持会话重用。 用于服务器端和客户端配置信息
	https://dev.mysql.com/doc/refman/8.0/en/reusing-ssl-sessions.html
	
5、资源管理。 MySQL 现在支持资源组的创建和管理，并允许将服务器内运行的线程分配给特定组，以便线程根据组可用的资源执行。 组属性启用对其资源的控制，以启用或限制组中线程的资源消耗。 
DBA 可以根据不同的工作负载修改这些属性。 目前，CPU时间是一种可管理的资源，以“虚拟CPU”的概念表示，包括CPU内核、超线程、硬件线程等。 
服务器在启动时确定有多少虚拟 CPU 可用，具有适当权限的数据库管理员可以将这些 CPU 与资源组相关联，并将线程分配给组
	https://dev.mysql.com/doc/refman/8.0/en/resource-groups.html
	
6、表加密管理。 现在可以通过定义和强制加密默认值来全局管理表加密。 default_table_encryption 变量为新创建的模式和通用表空间定义了加密默认值。 创建模式时，
也可以使用 DEFAULT ENCRYPTION 子句定义模式的默认加密。 默认情况下，表继承了创建它的模式或通用表空间的加密。
	https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html#innodb-schema-tablespace-encryption-default
	
7、InnoDB 增强功能。 添加了这些 InnoDB 增强功能：
	1）每次值更改时，当前最大自动增量计数器值都会写入重做日志，并在每个检查点保存到引擎专用系统表中。这些更改使当前最大的自动增量计数器值在服务器重新启动时保持不变。此外：
	a.服务器重新启动不再取消 AUTO_INCREMENT = N 表选项的效果。如果将自动增量计数器初始化为特定值，或者将自动增量计数器值更改为更大的值，则新值会在服务器重新启动时保持不变。
	b.在 ROLLBACK 操作之后立即重新启动服务器不再导致重用分配给回​​滚事务的自动增量值。
	c.如果将 AUTO_INCREMENT 列值修改为大于当前最大自动增量值的值（例如，在 UPDATE 操作中），则新值将被持久化，并且后续 INSERT 操作会从新的更大的值开始分配自动增量值价值。
	https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html
	https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html#innodb-auto-increment-initialization

	2）当遇到索引树损坏时，InnoDB 将损坏标志写入重做日志，这使得损坏标志崩溃安全。 InnoDB 还在每个检查点将内存损坏标志数据写入引擎专用系统表。 
	在恢复期间，InnoDB 从两个位置读取损坏标志并合并结果，然后将内存中的表和索引对象标记为损坏。
	
	3）InnoDB memcached 插件支持多个 get 操作（在单个 memcached 查询中获取多个键值对）和范围查询。
		https://dev.mysql.com/doc/refman/8.0/en/innodb-memcached-multiple-get-range-query.html
	
	4）可以使用一个新的动态变量 innodb_deadlock_detect 来禁用死锁检测。 在高并发系统上，当多个线程等待同一个锁时，死锁检测会导致速度变慢。 有时，禁用死锁检测并在发生死锁时依靠
	innodb_lock_wait_timeout 设置进行事务回滚可能更有效。
	
	5）新的 INFORMATION_SCHEMA.INNODB_CACHED_INDEXES 表报告每个索引在 InnoDB 缓冲池中缓存的索引页数。
	
	6）InnoDB 临时表现在在共享临时表空间 ibtmp1 中创建。
	
	7）InnoDB 表空间加密特性支持重做日志和撤消日志数据的加密。 请参阅重做日志加密和撤消日志加密。
	
	8）InnoDB 使用 SELECT ... FOR SHARE 和 SELECT ... FOR UPDATE 锁定读取语句支持 NOWAIT 和 SKIP LOCKED 选项。 如果请求的行被另一个事务锁定，则 NOWAIT 使语句立即返回。 
	SKIP LOCKED 从结果集中删除锁定的行
		https://dev.mysql.com/doc/refman/8.0/en/innodb-locking-reads.html#innodb-locking-reads-nowait-skip-locked
		SELECT ... FOR SHARE 替换 SELECT ... LOCK IN SHARE MODE，但 LOCK IN SHARE MODE 仍然可用以实现向后兼容性。 语句是等价的。 但是，FOR UPDATE 和 FOR SHARE 支持 NOWAIT、
		SKIP LOCKED 和 OF tbl_name 选项
		https://dev.mysql.com/doc/refman/8.0/en/select.html
	
	9）本机分区就地 API 支持 ADD PARTITION、DROP PARTITION、COALESCE PARTITION、REORGANIZE PARTITION 和 REBUILD PARTITION ALTER TABLE 选项，并且可以与 ALGORITHM={COPY|INPLACE} 和
	LOCK 子句一起使用。
	
	10）InnoDB 存储引擎现在使用 MySQL 数据字典，而不是它自己的存储引擎特定的数据字典。
		https://dev.mysql.com/doc/refman/8.0/en/data-dictionary.html
		
	11）mysql 系统表和数据字典表现在在 MySQL 数据目录中名为 mysql.ibd 的单个 InnoDB 表空间文件中创建。 以前，这些表是在 mysql 数据库目录中的单个 InnoDB 表空间文件中创建的。
	
	12）MySQL 8.0 中引入了以下撤消表空间更改：
		a. 默认情况下，撤消日志现在驻留在初始化 MySQL 实例时创建的两个撤消表空间中。 撤消日志不再在系统表空间中创建。
		b. 从 MySQL 8.0.14 开始，可以在运行时使用 CREATE UNDO TABLESPACE 语法在选定的位置创建额外的撤消表空间。
		c. innodb_undo_log_truncate 变量默认启用。
		d. innodb_rollback_segments 变量定义每个撤消表空间的回滚段数。 以前，innodb_rollback_segments 指定 MySQL 实例的回滚段总数。
		
	13）修改了影响缓冲池预刷新和刷新行为的变量的默认值：
		a. innodb_max_dirty_pages_pct_lwm 默认值现在是 10。之前的默认值 0 禁用缓冲池预刷新。 当缓冲池中脏页的百分比超过 10% 时，值 10 启用预刷新。 启用预刷新可提高性能一致性。
		b. innodb_max_dirty_pages_pct 默认值从 75 增加到 90。InnoDB 尝试从缓冲池中刷新数据，以便脏页的百分比不超过此值。 增加的默认值允许缓冲池中有更大百分比的脏页。
		
	14）默认的 innodb_autoinc_lock_mode 设置现在是 2（交错）。 交错锁模式允许并行执行多行插入，从而提高了并发性和可伸缩性。 新的 innodb_autoinc_lock_mode 默认设置反映了从基于语句
	的复制到基于行的复制作为 MySQL 5.7 中默认复制类型的变化。
		https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html#innodb-auto-increment-lock-modes
	
	15）ALTER TABLESPACE ... RENAME TO 语法支持重命名通用表空间。
	
	16）默认情况下禁用的新 innodb_dedicated_server 变量可用于让 InnoDB 根据在服务器上检测到的内存量自动配置以下选项：
		innodb_buffer_pool_size
		innodb_log_file_size
		innodb_flush_method
		https://dev.mysql.com/doc/refman/8.0/en/innodb-dedicated-server.html
		
	17）新的 INFORMATION_SCHEMA.INNODB_TABLESPACES_BRIEF 视图为 InnoDB 表空间提供空间、名称、路径、标志和空间类型数据。
	
	18）与 MySQL 捆绑的 zlib 库版本从版本 1.2.3 提升到版本 1.2.11。 MySQL 在 zlib 库的帮助下实现压缩。
	
	19）除全局临时表空间和撤消表空间文件外，所有 InnoDB 表空间文件中都存在序列化字典信息 (SDI)。 SDI 是表和表空间对象的序列化元数据。 SDI 数据的存在提供了元数据冗余。 
	例如，如果数据字典变得不可用，则可以从表空间文件中提取字典对象元数据。 使用 ibd2sdi 工具执行 SDI 提取。 SDI 数据以 JSON 格式存储。
	
	20）InnoDB 存储引擎现在支持原子 DDL，它确保 DDL 操作要么完全提交要么回滚，即使服务器在操作期间停止。
		https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html
		
	21）当服务器离线时，可以使用 innodb_directories 选项将表空间文件移动或恢复到新位置。
		https://dev.mysql.com/doc/refman/8.0/en/innodb-moving-data-files-offline.html
		
	22）实施了以下重做日志优化：
		a. 用户线程现在可以在不同步写入的情况下并发写入日志缓冲区。
		b. 用户线程现在可以以宽松的顺序将脏页添加到刷新列表中。
		c. 一个专用的日志线程现在负责将日志缓冲区写入系统缓冲区、将系统缓冲区刷新到磁盘、通知用户线程有关写入和刷新的重做、维护宽松刷新列表顺序所需的延迟以及写入检查点。
		d. 添加了系统变量，用于配置等待刷新重做的用户线程使用自旋延迟：
			innodb_log_wait_for_flush_spin_hwm:定义最大平均日志刷新时间，超过该时间用户线程在等待刷新重做时不再旋转。
			innodb_log_spin_cpu_abs_lwm:定义用户线程在等待刷新重做时不再旋转的最小 CPU 使用量。
			innodb_log_spin_cpu_pct_hwm: 定义用户线程在等待刷新重做时不再旋转的最大 CPU 使用量。
		f. innodb_log_buffer_size 变量现在是动态的，它允许在服务器运行时调整日志缓冲区的大小。
		https://dev.mysql.com/doc/refman/8.0/en/optimizing-innodb-logging.html
	
	23）从 MySQL 8.0.12 开始，对大对象 (LOB) 数据的小更新支持撤消日志记录，这提高了 100 字节或更小的 LOB 更新的性能。 以前，LOB 更新的大小至少为一个 LOB 页，这对于可能只修改几个字节
	的更新来说不是最佳的。 此增强功能基于 MySQL 8.0.4 中添加的对 LOB 数据的部分更新的支持。
	
	24）从 MySQL 8.0.12 开始，以下 ALTER TABLE 操作支持 ALGORITHM=INSTANT：
		a. 添加一列。 此功能也称为“即时添加列”。 限制适用。
			https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl-operations.html
		b. 添加或删除虚拟列。
		c. 添加或删除列默认值。
		d. 修改 ENUM 或 SET 列的定义。
		e. 更改索引类型。
		f. 重命名表。
		支持 ALGORITHM=INSTANT 的操作只修改数据字典中的元数据。 表上没有元数据锁，表数据不受影响，操作是即时的。 如果未明确指定，则支持它的操作默认使用 ALGORITHM=INSTANT。 
		如果指定了 ALGORITHM=INSTANT 但不受支持，则操作会立即失败并出现错误。
		https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl-operations.html
	
	25）从 MySQL 8.0.13 开始，TempTable 存储引擎支持二进制大对象 (BLOB) 类型列的存储。 此增强功能提高了使用包含 BLOB 数据的临时表的查询的性能。 以前，包含 BLOB 数据的临时表存储
	在由 internal_tmp_disk_storage_engine 定义的磁盘存储引擎中
		https://dev.mysql.com/doc/refman/8.0/en/internal-temporary-tables.html
	
	26）从 MySQL 8.0.13 开始，InnoDB 静态数据加密功能支持通用表空间。
	
	27）禁用 innodb_buffer_pool_in_core_file 变量通过排除 InnoDB 缓冲池页面来减小核心文件的大小。
		https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool-in-core-file.html
		
	28）从 MySQL 8.0.13 开始，用户创建的临时表和优化器创建的内部临时表存储在会话临时表空间中，这些临时表空间从临时表空间池中分配给会话。
	
	29）从 MySQL 8.0.14 开始，InnoDB 支持并行聚集索引读取，可以提高 CHECK TABLE 性能。
	
	30）从 8.0.14 开始，当启用 innodb_dedicated_server 变量时，日志文件的大小和数量根据自动配置的缓冲池大小进行配置。
	
	31）从 8.0.14 开始，CREATE TABLESPACE 语句的 ADD DATAFILE 子句是可选的，它允许没有 FILE 权限的用户创建表空间。
	
	32）默认情况下，当 TempTable 存储引擎占用的内存量超过 temptable_max_ram 变量定义的内存限制时，TempTable 存储引擎开始从磁盘分配内存映射的临时文件。
	
	33）从 MySQL 8.0.16 开始，InnoDB 静态数据加密功能支持 mysql 系统表空间的加密。 mysql 系统表空间包含 mysql 系统数据库和 MySQL 数据字典表。
		https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html
	
	34）在 MySQL 8.0.16 中引入的 innodb_spin_wait_pause_multiplier 变量可以更好地控制线程等待获取互斥锁或读写锁时发生的自旋锁轮询延迟的持续时间
		https://dev.mysql.com/doc/refman/8.0/en/innodb-performance-spin_lock_polling.html
	
	35）在 MySQL 8.0.17 中，通过更好地利用读取线程、减少并行扫描期间发生的预取活动的读取线程 I/O 以及支持分区的并行扫描，改进了大型数据集的 InnoDB 并行读取线程性能。
	
	36）在 MySQL 8.0.18 中引入的 innodb_idle_flush_pct 变量允许在空闲期间限制页面刷新，这有助于延长固态存储设备的寿命。
		https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool-flushing.html#innodb-limit-flushing-rate
	
	37）从 MySQL 8.0.19 开始支持对 InnoDB 数据进行有效采样以生成直方图统计信息。
		https://dev.mysql.com/doc/refman/8.0/en/analyze-table.html#analyze-table-histogram-statistics-analysis
		
	38）从 MySQL 8.0.20 开始，双写缓冲区存储区驻留在双写文件中。 在以前的版本中，存储区域位于系统表空间中。
		innodb_doublewrite_dir：定义双写缓冲区文件目录。
		innodb_doublewrite_files：定义双写文件的数量。
		innodb_doublewrite_pages：为批量写入定义每个线程的最大双写页数。
		innodb_doublewrite_batch_size：定义批量写入的双写页数。
		https://dev.mysql.com/doc/refman/8.0/en/innodb-doublewrite-buffer.html
	
	39）在 MySQL 8.0.20 中改进了竞争感知事务调度 (CATS) 算法，该算法优先考虑等待锁定的事务。 事务调度权重计算现在完全在一个单独的线程中执行，这提高了计算性能和准确性。
		lock_rec_release_attempts：尝试释放记录锁的次数。
		lock_rec_grant_attempts：授予记录锁的尝试次数。
		lock_schedule_refreshes：分析等待图以更新事务计划权重的次数。
		https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-scheduling.html
		
	40）从 MySQL 8.0.21 开始，为了提高需要访问表和行资源的锁队列的操作的并发性，锁系统互斥锁 (lock_sys->mutex) 被分片锁存器替换，并且锁队列被分组为表和页 锁定队列分片，
	每个分片由专用互斥锁保护。 以前，单锁系统互斥锁保护所有锁队列，这是高并发系统上的一个争论点。 新的分片实现允许对锁队列进行更精细的访问。
	
	41）从 MySQL 8.0.21 开始，使用 DATA DIRECTORY 子句在数据目录之外创建的表和表分区数据文件仅限于 InnoDB 已知的目录。 此更改允许数据库管理员控制创建表空间数据文件的位置，
	并确保在恢复期间可以找到数据文件。
	
	42）从 MySQL 8.0.21 开始，可以使用 ALTER INSTANCE {ENABLE|DISABLE} INNODB REDO_LOG 语法启用和禁用重做日志记录。 此功能旨在将数据加载到新的 MySQL 实例中。 
	禁用重做日志有助于通过避免重做日志写入来加速数据加载。
		https://dev.mysql.com/doc/refman/8.0/en/innodb-redo-log.html#innodb-disable-redo-logging
	
	43）在启动时，InnoDB 会根据存储在数据字典中的表空间文件路径验证已知表空间文件的路径，以防表空间文件被移动到不同的位置。 MySQL 8.0.21 中引入的新 innodb_validate_tablespace_paths 
	变量允许禁用表空间路径验证。 此功能适用于不移动表空间文件的环境。 禁用表空间路径验证可缩短具有大量表空间文件的系统的启动时间。
		https://dev.mysql.com/doc/refman/8.0/en/innodb-disabling-tablespace-path-validation.html
	
	44）从 MySQL 8.0.21 开始，在支持 atomic DDL 的存储引擎上，当使用基于行的复制时，CREATE TABLE ... SELECT 语句将作为一个事务记录在二进制日志中。 以前，它被记录为两个事务，一个用于创建表，另一个用于
	插入数据。 通过此更改，CREATE TABLE ... SELECT 语句现在对于基于行的复制是安全的，并且允许与基于 GTID 的复制一起使用。
		https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html
	
	45）在繁忙的系统上截断撤消表空间可能会影响性能，因为相关的刷新操作会从缓冲池中删除旧撤消表空间页面并将新撤消表空间的初始页面刷新到磁盘。 为了解决这个问题，
	从 MySQL 8.0.21 开始删除了刷新操作。
		https://dev.mysql.com/doc/refman/8.0/en/innodb-undo-tablespaces.html
	
	46）从 MySQL 8.0.22 开始，新的 innodb_extend_and_initialize 变量允许配置 InnoDB 如何为 Linux 上的 file-per-table 和通用表空间分配空间。 默认情况下，当操作需要表空间中的额外
	空间时，InnoDB 将页面分配给表空间并将 NULL 物理写入这些页面。
	
	47）从 MySQL 8.0.23 开始，InnoDB 支持对属于加密表空间的双写文件页面进行加密。 这些页面使用关联表空间的加密密钥进行加密。
		https://dev.mysql.com/doc/refman/8.0/en/innodb-data-encryption.html
	
	48）在 MySQL 8.0.23 中引入的 temptable_max_mmap 变量定义了 TempTable 存储引擎在开始在磁盘上存储内部临时表数据之前允许从内存映射 (MMAP) 文件分配的最大内存量。 
	设置为 0 将禁用 MMAP 文件的分配。
		https://dev.mysql.com/doc/refman/8.0/en/internal-temporary-tables.html
	
	49）MySQL 8.0.23 中引入的 AUTOEXTEND_SIZE 选项定义了 InnoDB 在表空间变满时扩展表空间大小的量，从而可以以更大的增量扩展表空间大小。 CREATE TABLE、ALTER TABLE、CREATE TABLESPACE 
	和 ALTER TABLESPACE 语句支持 AUTOEXTEND_SIZE 选项。
		https://dev.mysql.com/doc/refman/8.0/en/innodb-tablespace-autoextend-size.html
		
	50）在 MySQL 8.0.26 中引入的 innodb_segment_reserve_factor 系统变量允许配置保留为空页的表空间文件段页的百分比。
		https://dev.mysql.com/doc/refman/8.0/en/innodb-file-space.html#innodb-config-reserved-file-segment-pages
	
	51）在支持 fdatasync() 系统调用的平台上，在 MySQL 8.0.26 中引入的 innodb_use_fdatasync 变量允许使用 fdatasync() 而不是 fsync() 进行操作系统刷新。 除非后续数据检索需要，
	否则 fdatasync() 系统调用不会刷新对文件元数据的更改，从而提供潜在的性能优势。
	
	52）从 MySQL 8.0.28 开始， tmp_table_size 变量定义了由 TempTable 存储引擎创建的任何单个内存内部临时表的最大大小。 适当的大小限制可防止单个查询消耗过多的全局 TempTable 资源。
		https://dev.mysql.com/doc/refman/8.0/en/internal-temporary-tables.html#internal-temporary-tables-engines
	
	53）从 MySQL 8.0.28 开始，定义 InnoDB 一次可以打开的文件数量的 innodb_open_files 变量可以在运行时使用 SELECT innodb_set_open_files_limit(N) 语句进行设置。 
	该语句执行设置新限制的存储过程。
	
	54）从 MySQL 8.0.28 开始，InnoDB 支持使用 ALGORITHM=INSTANT 的 ALTER TABLE ... RENAME COLUMN 操作。
	
	55）从 MySQL 8.0.29 开始，InnoDB 支持使用 ALGORITHM=INSTANT 的 ALTER TABLE ... DROP COLUMN 操作。
	
8、优化
	1）MySQL 现在支持不可见索引。 优化器根本不使用不可见索引，但可以正常维护。 默认情况下，索引是可见的。 不可见索引可以测试删除索引对查询性能的影响，而无需进行破坏性更改，
	如果需要索引则必须撤消该更改
		https://dev.mysql.com/doc/refman/8.0/en/invisible-indexes.html
	
	2）MySQL 现在支持降序索引：索引定义中的 DESC 不再被忽略，而是导致键值按降序存储。 以前，可以以相反的顺序扫描索引，但会降低性能。 降序索引可以按正序扫描，效率更高。 
	当最有效的扫描顺序混合了某些列的升序和其他列的降序时，降序索引还使优化器可以使用多列索引。
		https://dev.mysql.com/doc/refman/8.0/en/descending-indexes.html
	
	3）MySQL 现在支持创建索引表达式值而不是列值的功能索引键部分。 功能键部分可以索引其他无法索引的值，例如 JSON 值。
		https://dev.mysql.com/doc/refman/8.0/en/create-index.html
		
	4）在 MySQL 8.0.14 及更高版本中，由常量文字表达式引起的琐碎 WHERE 条件在准备期间被删除，而不是稍后在优化期间。 在流程的早期删除条件可以简化具有琐碎条件的外部连接的查询的连接
	
	5）在 MySQL 8.0.16 及更高版本中，MySQL 可以在优化时使用常量折叠来处理列和常量值之间的比较，其中常量超出范围或相对于列的类型位于范围边界上，而不是执行 所以对于执行时的每一行。
		https://dev.mysql.com/doc/refman/8.0/en/constant-folding-optimization.html
	
	6）从 MySQL 8.0.16 开始，与 IN 子查询一起使用的半连接优化现在也可以应用于 EXISTS 子查询。 此外，优化器现在对附加到子查询的 WHERE 条件中的微相关等式谓词进行去相关，
	以便可以将它们与 IN 子查询中的表达式类似地对待； 这适用于 EXISTS 和 IN 子查询。
		https://dev.mysql.com/doc/refman/8.0/en/semijoins.html
	
	7）从 MySQL 8.0.17 开始，服务器在内部将任何不完整的 SQL 谓词（即具有 WHERE value 形式的谓词，其中 value 是列名或常量表达式并且不使用比较运算符）在内部重写为 WHERE value <> 0 在 
	上下文化阶段，因此查询解析器、查询优化器和查询执行器只需要使用完整的谓词。
	
	8）在 MySQL 8.0.17 及更高版本中，具有 NOT IN（子查询）或 NOT EXISTS（子查询）的 WHERE 条件在内部转换为反连接。 （反连接返回表中没有与连接条件匹配的行的表中的所有行。）这将删除
	子查询，这可以导致更快的查询执行，因为子查询的表现在在顶部处理 等级。
		https://dev.mysql.com/doc/refman/8.0/en/explain-output.html#explain-extra-information
	
	9）从 MySQL 8.0.21 开始，单表 UPDATE 或 DELETE 语句现在可以在许多情况下使用半连接转换或子查询实现。

9、备用锁。 一种新型备份锁允许在线备份期间进行 DML，同时防止可能导致快照不一致的操作。 LOCK INSTANCE FOR BACKUP 和 UNLOCK INSTANCE 语法支持新的备份锁。 使用这些语句需要
 BACKUP_ADMIN 权限。

10、复制。 对 MySQL 复制进行了以下增强：
	1）MySQL 复制现在支持使用紧凑的二进制格式对 JSON 文档的部分更新进行二进制记录，与记录完整的 JSON 文档相比，可以节省日志中的空间。 当使用基于语句的日志时，这种紧凑日志会自动完成，
	并且可以通过将新的 binlog_row_value_options 系统变量设置为 PARTIAL_JSON 来启用
	https://dev.mysql.com/doc/refman/8.0/en/json.html#json-partial-updates
